---
import Layout from "../layouts/Layout.astro";

interface CalendarEvent {
  title: string;
  description: string;
  time: string;
  status: "Confirmed" | "Tentative";
}
---

<Layout title="Widgets">
  <div class="container">
    <h2 class="container-header">Widgets</h2>

    <div class="widgets-list">
      <div class="widget-item" id="calendar-widget">
        <div class="widget-header">
          <h3>Calendar Widget</h3>
          <span id="connection-status"></span>
        </div>

        <div class="events-container" id="events-container">
          <div class="no-events">Loading...</div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Function to get cookie value
  function getCookie(name: string) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) {
      const token = parts.pop()?.split(";").shift();
      return token ? decodeURIComponent(token) : null;
    }
    return null;
  }

  // Function to render events
  function renderEvents(events: any[]) {
    const container = document.getElementById("events-container");
    if (!container) return;

    if (events.length === 0) {
      container.innerHTML =
        '<div class="no-events">No events scheduled for today</div>';
      return;
    }

    container.innerHTML = events
      .map(
        (event) => `
        <div class="event-item">
          <div class="event-content">
            <div class="event-header">
              <h4>${event.title}</h4>
              <span class="status ${event.status.toLowerCase()}">${event.status}</span>
            </div>
            ${event.description ? `<p>${event.description}</p>` : ""}
            <span class="time">${event.time}</span>
          </div>
        </div>
      `
      )
      .join("");
  }

  // Function to update connection status
  function updateConnectionStatus(isConnected: boolean) {
    const statusElement = document.getElementById("connection-status");
    if (!statusElement) return;

    if (isConnected) {
      statusElement.innerHTML =
        '<span class="status connected">Connected</span>';
    } else {
      statusElement.innerHTML =
        '<a href="/integrations" class="connect-link">Connect Calendar</a>';
    }
  }

  // Function to fetch and render calendar events
  async function fetchAndRenderEvents() {
    const token = getCookie("google_calendar_token");
    console.log("Client token:", token); // Debug log
    updateConnectionStatus(Boolean(token));

    if (!token) {
      const container = document.getElementById("events-container");
      if (container) {
        container.innerHTML =
          '<div class="no-events">Please connect your Google Calendar to view events</div>';
      }
      return;
    }

    try {
      const response = await fetch("/api/calendar/events");

      if (!response.ok) {
        const errorData = await response.json();
        console.error("API Error:", errorData); // Debug log
        throw new Error(errorData.error || "Failed to fetch events");
      }

      const data = await response.json();
      renderEvents(data.events);
    } catch (error) {
      console.error("Error fetching events:", error);
      const container = document.getElementById("events-container");
      if (container) {
        container.innerHTML =
          '<div class="no-events">Error loading events. Please try again later.</div>';
      }
    }
  }

  // Initial load
  fetchAndRenderEvents();

  // Refresh events every minute
  setInterval(fetchAndRenderEvents, 60000);
</script>

<style>
  .container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
    font-family: monospace;
  }

  .container-header {
    font-size: 1rem;
    margin-bottom: 1.5rem;
    font-weight: normal;
    background: #eee;
    padding: 1rem 1rem;
    border-radius: 0.5rem;
  }

  .widgets-list {
    padding: 0.5rem;
  }

  .widget-item {
    margin-bottom: 1.5rem;
    padding: 1rem;
    border: 1px solid #eee;
    border-radius: 0.5rem;
  }

  .widget-header {
    display: flex;
    align-items: baseline;
    gap: 1rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px dotted #ccc;
  }

  .widget-header h3 {
    font-size: 1rem;
    font-weight: normal;
    margin: 0;
  }

  .events-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .event-item {
    padding-bottom: 0.5rem;
    border-bottom: 1px dotted #eee;
  }

  .event-item:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }

  .event-header {
    display: flex;
    align-items: baseline;
    justify-content: space-between;
    gap: 1rem;
  }

  .event-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  h4 {
    font-size: 1rem;
    font-weight: normal;
    margin: 0;
  }

  p {
    font-size: 0.9rem;
    color: #666;
    margin: 0;
  }

  .time {
    font-size: 0.9rem;
    color: #666;
  }

  .status {
    font-size: 0.8rem;
    padding: 0.1rem 0.5rem;
    border-radius: 1rem;
  }

  .status.connected {
    color: #4caf50;
  }

  .status.confirmed {
    background: #e8f5e9;
    color: #2e7d32;
  }

  .status.tentative {
    background: #fff3e0;
    color: #ef6c00;
  }

  .status.important {
    background: #ffebee;
    color: #c62828;
  }

  .status.high-priority {
    background: #e3f2fd;
    color: #1565c0;
  }

  .no-events {
    text-align: center;
    color: #666;
    padding: 2rem 0;
    font-size: 0.9rem;
  }

  .connect-link {
    font-size: 0.8rem;
    color: #3245ff;
    text-decoration: underline;
  }

  .connect-link:hover {
    color: #bc52ee;
  }
</style>

---
import Layout from "../layouts/Layout.astro";

interface Integration {
  id: string;
  name: string;
  description: string;
  status: "available" | "coming_soon";
}

const integrations: Integration[] = [
  {
    id: "google-calendar",
    name: "Google Calendar",
    description: "View and manage your upcoming events and schedule",
    status: "available",
  },
  {
    id: "gmail",
    name: "Gmail",
    description: "Stay on top of your email inbox",
    status: "coming_soon",
  },
  {
    id: "weather",
    name: "Weather",
    description: "Get real-time weather updates and forecasts",
    status: "coming_soon",
  },
  {
    id: "tasks",
    name: "Tasks",
    description: "Manage your todo list and tasks",
    status: "coming_soon",
  },
];

// Check if calendar is connected
const calendarToken = Astro.cookies.get("google_calendar_token");
console.log("Calendar token:", calendarToken?.value);

const isCalendarConnected = Boolean(calendarToken?.value);
console.log("Is calendar connected:", isCalendarConnected);

// Check client-side cookie as well
---

<Layout>
  <div class="container">
    <h2 class="container-header">Integrations</h2>
    <div class="integrations-list">
      {
        integrations.map((integration) => (
          <div class="integration-item">
            <div class="integration-content">
              <div class="integration-header">
                <h2>{integration.name}</h2>
                {integration.status === "coming_soon" && (
                  <span class="status">Coming soon</span>
                )}
                {integration.id === "google-calendar" &&
                  isCalendarConnected && (
                    <span class="status connected">Connected</span>
                  )}
              </div>
              <p>{integration.description}</p>
            </div>
            {integration.status === "available" && (
              <button
                class="connect-btn"
                data-integration={integration.id}
                data-connected={
                  integration.id === "google-calendar" && isCalendarConnected
                }
              >
                {integration.id === "google-calendar" && isCalendarConnected
                  ? "Disconnect"
                  : "Connect"}
              </button>
            )}
          </div>
        ))
      }
    </div>
  </div>
</Layout>

<script>
  // Check if we have a token in cookies
  function checkCalendarConnection() {
    const cookies = document.cookie.split(";");
    const hasToken = cookies.some((cookie) =>
      cookie.trim().startsWith("google_calendar_token=")
    );

    if (hasToken) {
      document
        .querySelectorAll('[data-integration="google-calendar"]')
        .forEach((el) => {
          el.setAttribute("data-connected", "true");
          if (el.classList.contains("connect-btn")) {
            el.textContent = "Disconnect";
          }
        });

      const statusEl = document.createElement("span");
      statusEl.className = "status connected";
      statusEl.textContent = "Connected";

      document
        .querySelector('[data-integration="google-calendar"]')
        ?.querySelector(".integration-header")
        ?.appendChild(statusEl);
    }
  }

  // Run check on page load
  checkCalendarConnection();

  // Handle connect/disconnect buttons
  document.querySelectorAll(".connect-btn").forEach((button) => {
    button.addEventListener("click", async () => {
      const integration = button.getAttribute("data-integration");
      const isConnected = button.getAttribute("data-connected") === "true";

      if (integration === "google-calendar") {
        if (!isConnected) {
          try {
            // Start auth flow
            const response = await fetch("/api/calendar");
            const { authUrl } = await response.json();
            if (authUrl) {
              // Store current page URL in localStorage for redirect after auth
              localStorage.setItem("auth_redirect", window.location.href);
              window.location.href = authUrl;
            }
          } catch (error) {
            console.error("Error starting auth flow:", error);
          }
        } else {
          // Handle disconnect
          try {
            await fetch("/api/calendar/disconnect", { method: "POST" });
            window.location.reload();
          } catch (error) {
            console.error("Error disconnecting:", error);
          }
        }
      }
    });
  });

  // Check for auth callback
  const urlParams = new URLSearchParams(window.location.search);
  const code = urlParams.get("code");
  if (code) {
    // Exchange code for token
    fetch("/api/calendar/callback?code=" + code)
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          window.location.href = "/integrations";
        }
      })
      .catch((error) => console.error("Error exchanging code:", error));
  }
</script>

<style>
  .container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
    font-family: monospace;
  }

  .container-header {
    font-size: 1rem;
    margin-bottom: 1.5rem;
    font-weight: normal;
    background: #eee;
    padding: 1rem 1rem;
    border-radius: 0.5rem;
  }

  .integration-item {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px dotted #ccc;
  }

  .integration-header {
    display: flex;
    align-items: baseline;
    gap: 1rem;
  }

  .integration-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  h2 {
    font-size: 1rem;
    font-weight: normal;
    margin: 0;
  }

  p {
    font-size: 0.9rem;
    color: #666;
    margin: 0.25rem 0;
  }

  .status {
    font-size: 0.8rem;
    color: #666;
  }

  .status.connected {
    color: #4caf50;
  }

  .connect-btn {
    font-family: monospace;
    font-size: 0.9rem;
    background: none;
    border: none;
    color: #3245ff;
    padding: 0;
    cursor: pointer;
    text-decoration: underline;
  }

  .connect-btn:hover {
    color: #bc52ee;
  }
</style>
